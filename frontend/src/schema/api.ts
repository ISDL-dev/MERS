/* tslint:disable */
/* eslint-disable */
/**
 * MERS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetExprimentSettings200Response
 */
export interface GetExprimentSettings200Response {
    /**
     * 
     * @type {Array<GetExprimentSettings200ResponseExprimentConditionsInner>}
     * @memberof GetExprimentSettings200Response
     */
    'expriment-conditions'?: Array<GetExprimentSettings200ResponseExprimentConditionsInner>;
    /**
     * 
     * @type {Array<GetExprimentSettings200ResponseChannelTypesInner>}
     * @memberof GetExprimentSettings200Response
     */
    'channel-types'?: Array<GetExprimentSettings200ResponseChannelTypesInner>;
}
/**
 * 
 * @export
 * @interface GetExprimentSettings200ResponseChannelTypesInner
 */
export interface GetExprimentSettings200ResponseChannelTypesInner {
    /**
     * 
     * @type {number}
     * @memberof GetExprimentSettings200ResponseChannelTypesInner
     */
    'channel_type_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetExprimentSettings200ResponseChannelTypesInner
     */
    'channel_type_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetExprimentSettings200ResponseChannelTypesInner
     */
    'channels'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetExprimentSettings200ResponseExprimentConditionsInner
 */
export interface GetExprimentSettings200ResponseExprimentConditionsInner {
    /**
     * 
     * @type {number}
     * @memberof GetExprimentSettings200ResponseExprimentConditionsInner
     */
    'condition_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetExprimentSettings200ResponseExprimentConditionsInner
     */
    'condition_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetExprimentSettings200ResponseExprimentConditionsInner
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetExprimentSettings200ResponseExprimentConditionsInner
     */
    'media_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetExprimentSettings200ResponseExprimentConditionsInner
     */
    'number_of_medias'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetExprimentSettings200ResponseExprimentConditionsInner
     */
    'rating_second_by_media'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetExprimentSettings200ResponseExprimentConditionsInner
     */
    'dataset'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetExprimentSettings200ResponseExprimentConditionsInner
     */
    'platform'?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface PostChannelTypesRequest
 */
export interface PostChannelTypesRequest {
    /**
     * 
     * @type {string}
     * @memberof PostChannelTypesRequest
     */
    'channel_type_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PostChannelTypesRequest
     */
    'channels'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PostExprimentConditionsRequest
 */
export interface PostExprimentConditionsRequest {
    /**
     * 
     * @type {string}
     * @memberof PostExprimentConditionsRequest
     */
    'condition_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostExprimentConditionsRequest
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostExprimentConditionsRequest
     */
    'media_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof PostExprimentConditionsRequest
     */
    'number_of_medias'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostExprimentConditionsRequest
     */
    'rating_second_by_media'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostExprimentConditionsRequest
     */
    'dataset'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostExprimentConditionsRequest
     */
    'platform'?: string;
}
/**
 * 
 * @export
 * @interface PostTrialsRequest
 */
export interface PostTrialsRequest {
    /**
     * 
     * @type {PostTrialsRequestTrialMetadata}
     * @memberof PostTrialsRequest
     */
    'trial_metadata': PostTrialsRequestTrialMetadata;
    /**
     * 
     * @type {PostTrialsRequestSubjectMetadata}
     * @memberof PostTrialsRequest
     */
    'subject_metadata': PostTrialsRequestSubjectMetadata;
    /**
     * 
     * @type {PostTrialsRequestRatingSet}
     * @memberof PostTrialsRequest
     */
    'rating_set': PostTrialsRequestRatingSet;
}
/**
 * 
 * @export
 * @interface PostTrialsRequestRatingSet
 */
export interface PostTrialsRequestRatingSet {
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestRatingSet
     */
    'media_type'?: string;
    /**
     * 
     * @type {Array<PostTrialsRequestRatingSetRatingInner>}
     * @memberof PostTrialsRequestRatingSet
     */
    'rating'?: Array<PostTrialsRequestRatingSetRatingInner>;
}
/**
 * 
 * @export
 * @interface PostTrialsRequestRatingSetRatingInner
 */
export interface PostTrialsRequestRatingSetRatingInner {
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestRatingSetRatingInner
     */
    'dataset'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestRatingSetRatingInner
     */
    'filename'?: string;
    /**
     * 
     * @type {PostTrialsRequestRatingSetRatingInnerEmotion}
     * @memberof PostTrialsRequestRatingSetRatingInner
     */
    'emotion'?: PostTrialsRequestRatingSetRatingInnerEmotion;
}
/**
 * 
 * @export
 * @interface PostTrialsRequestRatingSetRatingInnerEmotion
 */
export interface PostTrialsRequestRatingSetRatingInnerEmotion {
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestRatingSetRatingInnerEmotion
     */
    'valence'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestRatingSetRatingInnerEmotion
     */
    'arousal'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestRatingSetRatingInnerEmotion
     */
    'liking'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestRatingSetRatingInnerEmotion
     */
    'dominance'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestRatingSetRatingInnerEmotion
     */
    'famility'?: number;
}
/**
 * 
 * @export
 * @interface PostTrialsRequestSubjectMetadata
 */
export interface PostTrialsRequestSubjectMetadata {
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'handedness'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'vision'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'vision_aid'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'education'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'alcohol_consumption'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'coffee_consumption'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'tea_consumption'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'tobacco_consumption'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'drug_consumption'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'syndroms'?: string;
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'hours_of_sleep_last_night'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'normal_hours_of_sleep'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'level_of_alertness'?: string;
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'head_circumference'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'distance_nasion_inion'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestSubjectMetadata
     */
    'distance_left_right_jaw_hinge'?: number;
}
/**
 * 
 * @export
 * @interface PostTrialsRequestTrialMetadata
 */
export interface PostTrialsRequestTrialMetadata {
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestTrialMetadata
     */
    'condition_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostTrialsRequestTrialMetadata
     */
    'channel_type_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestTrialMetadata
     */
    'pre_started_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestTrialMetadata
     */
    'started_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTrialsRequestTrialMetadata
     */
    'ended_at'?: string;
}

/**
 * ChannelTypesApi - axios parameter creator
 * @export
 */
export const ChannelTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add channel types
         * @param {PostChannelTypesRequest} postChannelTypesRequest request body of channel types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postChannelTypes: async (postChannelTypesRequest: PostChannelTypesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postChannelTypesRequest' is not null or undefined
            assertParamExists('postChannelTypes', 'postChannelTypesRequest', postChannelTypesRequest)
            const localVarPath = `/channel-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postChannelTypesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelTypesApi - functional programming interface
 * @export
 */
export const ChannelTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add channel types
         * @param {PostChannelTypesRequest} postChannelTypesRequest request body of channel types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postChannelTypes(postChannelTypesRequest: PostChannelTypesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postChannelTypes(postChannelTypesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelTypesApi - factory interface
 * @export
 */
export const ChannelTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary Add channel types
         * @param {PostChannelTypesRequest} postChannelTypesRequest request body of channel types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postChannelTypes(postChannelTypesRequest: PostChannelTypesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postChannelTypes(postChannelTypesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChannelTypesApi - object-oriented interface
 * @export
 * @class ChannelTypesApi
 * @extends {BaseAPI}
 */
export class ChannelTypesApi extends BaseAPI {
    /**
     * 
     * @summary Add channel types
     * @param {PostChannelTypesRequest} postChannelTypesRequest request body of channel types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelTypesApi
     */
    public postChannelTypes(postChannelTypesRequest: PostChannelTypesRequest, options?: AxiosRequestConfig) {
        return ChannelTypesApiFp(this.configuration).postChannelTypes(postChannelTypesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExprimentConditionsApi - axios parameter creator
 * @export
 */
export const ExprimentConditionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add experimental conditions
         * @param {PostExprimentConditionsRequest} postExprimentConditionsRequest request body of experimental conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExprimentConditions: async (postExprimentConditionsRequest: PostExprimentConditionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postExprimentConditionsRequest' is not null or undefined
            assertParamExists('postExprimentConditions', 'postExprimentConditionsRequest', postExprimentConditionsRequest)
            const localVarPath = `/expriment-conditions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postExprimentConditionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExprimentConditionsApi - functional programming interface
 * @export
 */
export const ExprimentConditionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExprimentConditionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add experimental conditions
         * @param {PostExprimentConditionsRequest} postExprimentConditionsRequest request body of experimental conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExprimentConditions(postExprimentConditionsRequest: PostExprimentConditionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postExprimentConditions(postExprimentConditionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExprimentConditionsApi - factory interface
 * @export
 */
export const ExprimentConditionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExprimentConditionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add experimental conditions
         * @param {PostExprimentConditionsRequest} postExprimentConditionsRequest request body of experimental conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExprimentConditions(postExprimentConditionsRequest: PostExprimentConditionsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postExprimentConditions(postExprimentConditionsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExprimentConditionsApi - object-oriented interface
 * @export
 * @class ExprimentConditionsApi
 * @extends {BaseAPI}
 */
export class ExprimentConditionsApi extends BaseAPI {
    /**
     * 
     * @summary Add experimental conditions
     * @param {PostExprimentConditionsRequest} postExprimentConditionsRequest request body of experimental conditions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExprimentConditionsApi
     */
    public postExprimentConditions(postExprimentConditionsRequest: PostExprimentConditionsRequest, options?: AxiosRequestConfig) {
        return ExprimentConditionsApiFp(this.configuration).postExprimentConditions(postExprimentConditionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExprimentSettingsApi - axios parameter creator
 * @export
 */
export const ExprimentSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all experimental settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExprimentSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/expriment-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExprimentSettingsApi - functional programming interface
 * @export
 */
export const ExprimentSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExprimentSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all experimental settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExprimentSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExprimentSettings200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExprimentSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExprimentSettingsApi - factory interface
 * @export
 */
export const ExprimentSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExprimentSettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all experimental settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExprimentSettings(options?: any): AxiosPromise<GetExprimentSettings200Response> {
            return localVarFp.getExprimentSettings(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExprimentSettingsApi - object-oriented interface
 * @export
 * @class ExprimentSettingsApi
 * @extends {BaseAPI}
 */
export class ExprimentSettingsApi extends BaseAPI {
    /**
     * 
     * @summary Get all experimental settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExprimentSettingsApi
     */
    public getExprimentSettings(options?: AxiosRequestConfig) {
        return ExprimentSettingsApiFp(this.configuration).getExprimentSettings(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecordingPauseApi - axios parameter creator
 * @export
 */
export const RecordingPauseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Pause recording Map1058
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordingPause: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recording-pause`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecordingPauseApi - functional programming interface
 * @export
 */
export const RecordingPauseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecordingPauseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Pause recording Map1058
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordingPause(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordingPause(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecordingPauseApi - factory interface
 * @export
 */
export const RecordingPauseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecordingPauseApiFp(configuration)
    return {
        /**
         * 
         * @summary Pause recording Map1058
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordingPause(options?: any): AxiosPromise<void> {
            return localVarFp.getRecordingPause(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecordingPauseApi - object-oriented interface
 * @export
 * @class RecordingPauseApi
 * @extends {BaseAPI}
 */
export class RecordingPauseApi extends BaseAPI {
    /**
     * 
     * @summary Pause recording Map1058
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordingPauseApi
     */
    public getRecordingPause(options?: AxiosRequestConfig) {
        return RecordingPauseApiFp(this.configuration).getRecordingPause(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecordingStartApi - axios parameter creator
 * @export
 */
export const RecordingStartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Start recording Map1058
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordingStart: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recording-start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecordingStartApi - functional programming interface
 * @export
 */
export const RecordingStartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecordingStartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Start recording Map1058
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordingStart(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordingStart(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecordingStartApi - factory interface
 * @export
 */
export const RecordingStartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecordingStartApiFp(configuration)
    return {
        /**
         * 
         * @summary Start recording Map1058
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordingStart(options?: any): AxiosPromise<void> {
            return localVarFp.getRecordingStart(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecordingStartApi - object-oriented interface
 * @export
 * @class RecordingStartApi
 * @extends {BaseAPI}
 */
export class RecordingStartApi extends BaseAPI {
    /**
     * 
     * @summary Start recording Map1058
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordingStartApi
     */
    public getRecordingStart(options?: AxiosRequestConfig) {
        return RecordingStartApiFp(this.configuration).getRecordingStart(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TrialsApi - axios parameter creator
 * @export
 */
export const TrialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * create a trial result containing a set of a subject info and rating results
         * @summary create a trial result
         * @param {PostTrialsRequest} postTrialsRequest trial result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTrials: async (postTrialsRequest: PostTrialsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postTrialsRequest' is not null or undefined
            assertParamExists('postTrials', 'postTrialsRequest', postTrialsRequest)
            const localVarPath = `/trials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTrialsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrialsApi - functional programming interface
 * @export
 */
export const TrialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrialsApiAxiosParamCreator(configuration)
    return {
        /**
         * create a trial result containing a set of a subject info and rating results
         * @summary create a trial result
         * @param {PostTrialsRequest} postTrialsRequest trial result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTrials(postTrialsRequest: PostTrialsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTrials(postTrialsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrialsApi - factory interface
 * @export
 */
export const TrialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrialsApiFp(configuration)
    return {
        /**
         * create a trial result containing a set of a subject info and rating results
         * @summary create a trial result
         * @param {PostTrialsRequest} postTrialsRequest trial result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTrials(postTrialsRequest: PostTrialsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postTrials(postTrialsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrialsApi - object-oriented interface
 * @export
 * @class TrialsApi
 * @extends {BaseAPI}
 */
export class TrialsApi extends BaseAPI {
    /**
     * create a trial result containing a set of a subject info and rating results
     * @summary create a trial result
     * @param {PostTrialsRequest} postTrialsRequest trial result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrialsApi
     */
    public postTrials(postTrialsRequest: PostTrialsRequest, options?: AxiosRequestConfig) {
        return TrialsApiFp(this.configuration).postTrials(postTrialsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


