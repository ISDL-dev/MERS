/* tslint:disable */
/* eslint-disable */
/**
 * MERS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'media_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'filename'?: string;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'rating_times'?: number;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Movie
 */
export interface Movie {
    /**
     * 
     * @type {number}
     * @memberof Movie
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface TargetsInner
 */
export interface TargetsInner {
    /**
     * 
     * @type {string}
     * @memberof TargetsInner
     */
    'type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TargetsInner
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface TrialsPostRequest
 */
export interface TrialsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequest
     */
    'datetime'?: string;
    /**
     * 
     * @type {TrialsPostRequestSubject}
     * @memberof TrialsPostRequest
     */
    'subject': TrialsPostRequestSubject;
    /**
     * 
     * @type {Array<TrialsPostRequestRatingsInner>}
     * @memberof TrialsPostRequest
     */
    'ratings': Array<TrialsPostRequestRatingsInner>;
}
/**
 * 
 * @export
 * @interface TrialsPostRequestRatingsInner
 */
export interface TrialsPostRequestRatingsInner {
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestRatingsInner
     */
    'media_id'?: number;
    /**
     * 
     * @type {TrialsPostRequestRatingsInnerEmotions}
     * @memberof TrialsPostRequestRatingsInner
     */
    'emotions'?: TrialsPostRequestRatingsInnerEmotions;
}
/**
 * 
 * @export
 * @interface TrialsPostRequestRatingsInnerEmotions
 */
export interface TrialsPostRequestRatingsInnerEmotions {
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestRatingsInnerEmotions
     */
    'valence'?: number;
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestRatingsInnerEmotions
     */
    'arousal'?: number;
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestRatingsInnerEmotions
     */
    'liking'?: number;
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestRatingsInnerEmotions
     */
    'dominance'?: number;
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestRatingsInnerEmotions
     */
    'famility'?: number;
}
/**
 * 
 * @export
 * @interface TrialsPostRequestSubject
 */
export interface TrialsPostRequestSubject {
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestSubject
     */
    'participant_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestSubject
     */
    'age'?: number;
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequestSubject
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequestSubject
     */
    'handedness'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequestSubject
     */
    'vision'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequestSubject
     */
    'vision_Aid'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequestSubject
     */
    'education'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequestSubject
     */
    'alcohol_consumption'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequestSubject
     */
    'coffee_consumption'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequestSubject
     */
    'tea_consumption'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequestSubject
     */
    'tobacco_consumption'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequestSubject
     */
    'drug_consumption'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequestSubject
     */
    'syndroms'?: string;
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestSubject
     */
    'hours_of_sleep_last_night'?: number;
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestSubject
     */
    'normal_hours_of_sleep'?: number;
    /**
     * 
     * @type {string}
     * @memberof TrialsPostRequestSubject
     */
    'level_of_alertness'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TrialsPostRequestSubject
     */
    'distribute_physiological_recordings'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TrialsPostRequestSubject
     */
    'publish_audio_visual_recordings'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestSubject
     */
    'head_circumference'?: number;
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestSubject
     */
    'distance_nasion-inion'?: number;
    /**
     * 
     * @type {number}
     * @memberof TrialsPostRequestSubject
     */
    'distance_left_right_jaw_hinge'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * create a trial result containing a set of a subject info and rating results
         * @summary create a trial result
         * @param {TrialsPostRequest} [trialsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trialsPost: async (trialsPostRequest?: TrialsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/trials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trialsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * create a trial result containing a set of a subject info and rating results
         * @summary create a trial result
         * @param {TrialsPostRequest} [trialsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trialsPost(trialsPostRequest?: TrialsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trialsPost(trialsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * create a trial result containing a set of a subject info and rating results
         * @summary create a trial result
         * @param {TrialsPostRequest} [trialsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trialsPost(trialsPostRequest?: TrialsPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.trialsPost(trialsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * create a trial result containing a set of a subject info and rating results
     * @summary create a trial result
     * @param {TrialsPostRequest} [trialsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public trialsPost(trialsPostRequest?: TrialsPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).trialsPost(trialsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get display single image
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImages: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getImages', 'id', id)
            const localVarPath = `/images`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get display single image
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImages(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImages(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImagesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get display single image
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImages(id: number, options?: any): AxiosPromise<Image> {
            return localVarFp.getImages(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
    /**
     * 
     * @summary Get display single image
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public getImages(id: number, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).getImages(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MoviesApi - axios parameter creator
 * @export
 */
export const MoviesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get a display movie
         * @param {number} id Movie ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovie: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMovie', 'id', id)
            const localVarPath = `/movies`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MoviesApi - functional programming interface
 * @export
 */
export const MoviesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MoviesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get a display movie
         * @param {number} id Movie ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMovie(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Movie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMovie(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MoviesApi - factory interface
 * @export
 */
export const MoviesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MoviesApiFp(configuration)
    return {
        /**
         * 
         * @summary get a display movie
         * @param {number} id Movie ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovie(id: number, options?: any): AxiosPromise<Movie> {
            return localVarFp.getMovie(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MoviesApi - object-oriented interface
 * @export
 * @class MoviesApi
 * @extends {BaseAPI}
 */
export class MoviesApi extends BaseAPI {
    /**
     * 
     * @summary get a display movie
     * @param {number} id Movie ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getMovie(id: number, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getMovie(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TargetsApi - axios parameter creator
 * @export
 */
export const TargetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get some rated targets
         * @param {string} type media type
         * @param {number} num how many rated targets to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargets: async (type: string, num: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getTargets', 'type', type)
            // verify required parameter 'num' is not null or undefined
            assertParamExists('getTargets', 'num', num)
            const localVarPath = `/targets`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"num"}}`, encodeURIComponent(String(num)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TargetsApi - functional programming interface
 * @export
 */
export const TargetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TargetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get some rated targets
         * @param {string} type media type
         * @param {number} num how many rated targets to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargets(type: string, num: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetsInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargets(type, num, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TargetsApi - factory interface
 * @export
 */
export const TargetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TargetsApiFp(configuration)
    return {
        /**
         * 
         * @summary get some rated targets
         * @param {string} type media type
         * @param {number} num how many rated targets to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargets(type: string, num: number, options?: any): AxiosPromise<Array<TargetsInner>> {
            return localVarFp.getTargets(type, num, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TargetsApi - object-oriented interface
 * @export
 * @class TargetsApi
 * @extends {BaseAPI}
 */
export class TargetsApi extends BaseAPI {
    /**
     * 
     * @summary get some rated targets
     * @param {string} type media type
     * @param {number} num how many rated targets to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetsApi
     */
    public getTargets(type: string, num: number, options?: AxiosRequestConfig) {
        return TargetsApiFp(this.configuration).getTargets(type, num, options).then((request) => request(this.axios, this.basePath));
    }
}


